--- emacs-24.3/src/w32fns.c	Wed Jan 02 04:37:17 2013
+++ emacs-24.3-smart-ime-mingw/src/w32fns.c	Mon Mar 11 23:25:49 2013
@@ -160,6 +160,11 @@
 typedef BOOL (WINAPI * GetMonitorInfo_Proc)
   (IN HMONITOR monitor, OUT struct MONITOR_INFO* info);
 
+/* dyn { */
+typedef BOOL (WINAPI * ImmSetOpenStatus_Proc) (HIMC hIMC, BOOL fOpen);
+typedef BOOL (WINAPI * ImmGetOpenStatus_Proc) (HIMC hIMC);
+/* } */
+
 TrackMouseEvent_Proc track_mouse_event_fn = NULL;
 ImmGetCompositionString_Proc get_composition_string_fn = NULL;
 ImmGetContext_Proc get_ime_context_fn = NULL;
@@ -168,6 +173,22 @@
 MonitorFromPoint_Proc monitor_from_point_fn = NULL;
 GetMonitorInfo_Proc get_monitor_info_fn = NULL;
 
+/* dyn { */
+ImmSetOpenStatus_Proc set_ime_open_status_fn = NULL;
+ImmGetOpenStatus_Proc get_ime_open_status_fn = NULL;
+/* } */
+
+/* dyn { */
+#define WM_MULE_IMM_MESSAGE_START             (WM_USER+2300)
+#define WM_MULE_IMM_SET_STATUS                (WM_USER+2300)
+#define WM_MULE_IMM_GET_STATUS                (WM_USER+2301)
+#define WM_MULE_IMM_MESSAGE_END               (WM_USER+2301)
+#define MESSAGE_IMM_COM_P(message)              \
+  (((message) >= WM_MULE_IMM_MESSAGE_START) &&  \
+   ((message) <= WM_MULE_IMM_MESSAGE_END))
+
+/* } */
+
 #ifdef NTGUI_UNICODE
 #define unicode_append_menu AppendMenuW
 #else /* !NTGUI_UNICODE */
@@ -2687,6 +2708,25 @@
 
 /* Main window procedure */
 
+/* dyn { */
+static void w32_set_ime_status(HWND hwnd, int openp);
+static int w32_get_ime_status(HWND hwnd);
+
+static LRESULT CALLBACK
+conversion_agent_wndproc (HWND hwnd, UINT message, WPARAM wparam, LPARAM lparam)
+{
+  switch (message) {
+  case WM_MULE_IMM_SET_STATUS:
+    w32_set_ime_status (hwnd, (int) wparam);
+    break;
+
+  case WM_MULE_IMM_GET_STATUS:
+    return w32_get_ime_status (hwnd);
+
+  }
+}
+/* } */
+
 static LRESULT CALLBACK
 w32_wnd_proc (HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
 {
@@ -3939,6 +3979,12 @@
       }
 
     default:
+      /* dyn { */
+      if (MESSAGE_IMM_COM_P(msg)) {
+        return conversion_agent_wndproc (hwnd, msg, wParam, lParam);
+      }
+      /* } */
+
       /* Check for messages registered at runtime. */
       if (msg == msh_mousewheel)
 	{
@@ -7300,6 +7346,105 @@
   0, /* x_set_tool_bar_position */
 };
 
+
+/* dyn { ================================================================ */
+
+static void
+w32_set_ime_status(HWND hwnd, int openp)
+{
+  HIMC himc;
+
+  himc = get_ime_context_fn(hwnd);
+
+  if (!himc)
+    return;
+
+  set_ime_open_status_fn(himc, openp);
+  release_ime_context_fn(hwnd, himc);
+}
+
+static int
+w32_get_ime_status(HWND hwnd)
+{
+  HIMC himc;
+  int ret;
+
+  himc = get_ime_context_fn(hwnd);
+  
+  if (!himc)
+    return 0;
+
+  ret = get_ime_open_status_fn(himc);
+  release_ime_context_fn(hwnd, himc);
+
+  return ret;
+}
+
+
+static void internal_ime_set_status(BOOL fOpen)
+{
+
+  HWND hwnd;
+
+  hwnd = FRAME_W32_WINDOW( SELECTED_FRAME() );
+  SendMessage(hwnd, WM_MULE_IMM_SET_STATUS, fOpen, 0);
+}
+
+
+static BOOL internal_ime_get_status(void)
+{
+
+  HWND hwnd;
+  BOOL fOpen;
+
+  hwnd = FRAME_W32_WINDOW( SELECTED_FRAME() );
+  fOpen = SendMessage (hwnd, WM_MULE_IMM_GET_STATUS, 0, 0);
+
+  /* HIMC hIMC; */
+  /* hIMC = get_ime_context_fn(GetActiveWindow()); */
+
+  /* BOOL fOpen; */
+  /* fOpen = imm_get_open_status(hIMC); */
+
+  /* release_ime_context_fn(GetActiveWindow(), hIMC); */
+
+  return fOpen;
+}
+
+/* elisp manual: Writing Emacs Primitives - Writing C code for Emacs. */
+
+
+DEFUN ("ime-set-status", Fime_set_status, Sime_set_status,
+       1, 1, 0, doc: /**/)
+  (Lisp_Object arg)
+{
+  if (NILP(arg)) {
+    internal_ime_set_status(0);
+  }
+  else {
+    internal_ime_set_status(1);
+  }
+
+  return Qnil;
+}
+
+DEFUN ("ime-get-status", Fime_get_status, Sime_get_status,
+       0, 0, "", doc: /**/)
+     ()
+{
+
+  BOOL fOpen;
+  fOpen = internal_ime_get_status();
+
+  if (fOpen)
+    return Qt;
+
+  return Qnil;
+}
+
+/* ================================================================ */
+
+
 void
 syms_of_w32fns (void)
 {
@@ -7642,6 +7787,14 @@
 #ifdef WINDOWSNT
   defsubr (&Ssystem_move_file_to_trash);
 #endif
+
+  /* dyn { */
+
+  defsubr (&Sime_set_status);
+  defsubr (&Sime_get_status);
+
+  /* } */
+
 }
 
 
@@ -7679,6 +7832,14 @@
       GetProcAddress (imm32_lib, "ImmReleaseContext");
     set_ime_composition_window_fn = (ImmSetCompositionWindow_Proc)
       GetProcAddress (imm32_lib, "ImmSetCompositionWindow");
+
+    /* dyn { */
+    set_ime_open_status_fn = (ImmSetOpenStatus_Proc)
+      GetProcAddress (imm32_lib, "ImmSetOpenStatus");
+    get_ime_open_status_fn = (ImmGetOpenStatus_Proc)
+      GetProcAddress (imm32_lib, "ImmGetOpenStatus");
+    /* } */
+
   }
   DEFVAR_INT ("w32-ansi-code-page",
 	      w32_ansi_code_page,
